--Homework Day4------
-------------------------------------------------------------------------------
--Declare scalar variable for storing FirstName values
--Assign value ‘Antonio’ to the FirstName variable
--Find all Students having FirstName same as the variable

DECLARE @FirstName nvarchar(100)
SET @FirstName = 'Antonio'

SELECT * 
from dbo.Student s
where s.FirstName = @FirstName
GO
-------------------------------------------------------------------------------

--Declare table variable that will contain StudentId, StudentName and DateOfBirth
--Fill the table variable with all Female students

DECLARE @StudentList TABLE 
(StudentId int, StudentName varchar(200), DateOfBirth date);

INSERT INTO @StudentList
SELECT ID, FirstName +N' '+LastName as FullName, DateOfBirth
FROM dbo.Student s
WHERE s.Gender = 'F'

SELECT * 
FROM @StudentList
GO
--------------------------------------------------------------------------------
--Declare temp table that will contain LastName and EnrolledDate columns
--Fill the temp table with all Male students having First Name starting with ‘A’
--Retrieve the students from the table which last name is with 7 characters

CREATE TABLE #StudentMaleList
(StudentLastName nvarchar(100), StudentEnrolledDate date)

INSERT INTO #StudentMaleList
SELECT LastName, EnrolledDate
FROM dbo.Student s
WHERE s.Gender = 'M' AND s.FirstName LIKE 'A%'

SELECT * 
FROM #StudentMaleList
WHERE LEN(StudentLastName)=7
--------------------------------------------------------------------------------
--Find all teachers whose FirstName length is less than 5 and
--the first 3 characters of their FirstName and LastName are the same

CREATE TABLE #TeacherList
(TeacherName nvarchar(50), TeacherLastName nvarchar(50))


INSERT INTO #TeacherList
SELECT FirstName, LastName
FROM dbo.Teacher t
WHERE LEN(FirstName)<5 AND
SUBSTRING(FirstName,1,3)=SUBSTRING(LastName,1,3)

SELECT * FROM #TeacherList

--------------------------------------------------------------------------------
--Declare scalar function (fn_FormatStudentName) for retrieving the Student description for specific StudentId in the following format:
--StudentCardNumber without “sc-”
--“ – “
--First character of student FirstName
--“.”
--Student LastName
DROP FUNCTION IF EXISTS dbo.fn_FormatStudentName;
GO

CREATE FUNCTION dbo.fn_FormatStudentName(@StudentID int)
RETURNS nvarchar(100)
AS
BEGIN

DECLARE @Result nvarchar(100)

SELECT @Result= RIGHT(StudentCardNumber,5) +N'-'+ SUBSTRING(FirstName,1,1)+N'.'+LastName
FROM dbo.Student s
WHERE Id=@StudentID

RETURN @Result
END


select *,dbo.fn_FormatStudentName(s.Id) as StudentCode
from dbo.Student s

--select * from Student
----------------------------------------------------------------------------------
--Create multi-statement table value function that for specific Teacher and Course
--will return list of students (FirstName, LastName) who passed the exam, together with Grade and CreatedDate

DROP FUNCTION IF EXISTS dbo.fn_StudentExamPassed;
GO

CREATE FUNCTION dbo.fn_StudentExamPassed (@StudentPassID int, @TeacherPassID int)
RETURNS @output TABLE (StudentFirstName nvarchar(100),StudentLastName nvarchar(100), Grade int, CreatedDate date)
AS
BEGIN

INSERT INTO @output
SELECT s.FirstName,s.LastName,g.Grade,g.CreatedDate
FROM dbo.Grade g
INNER JOIN dbo.Student s on s.ID = g.StudentID
INNER JOIN dbo.Teacher t on t.ID = g.TeacherID
WHERE g.StudentID = @StudentPassID
AND g.TeacherID = @TeacherPassID
GROUP BY s.FirstName, s.LastName,g.Grade,g.CreatedDate
ORDER BY CreatedDate
RETURN
END
GO


DECLARE @StudentPassID int = 111
DECLARE @TeacherPassID int = 1

SELECT * from dbo.fn_StudentExamPassed(@StudentPassID,@TeacherPassID)
---------------------------------------------------------------------


select * from Student Where id =111
select * from Teacher where Id=1
select * from Grade where StudentID = 111 and TeacherID=1
